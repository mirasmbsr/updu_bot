import os
import json
import logging
from flask import Flask, request
from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Dispatcher, CommandHandler, MessageHandler, Filters, CallbackQueryHandler




def save_users():
    with open('users.json', 'w', encoding='utf-8') as f:
        json.dump(users, f)

def load_users():
    global users
    try:
        with open('users.json', 'r', encoding='utf-8') as f:
            users = json.load(f)
    except FileNotFoundError:
        users = {}





# –ü—Ä–æ—Å—Ç–∞—è in-memory –±–∞–∑–∞ (–∑–∞–º–µ–Ω–∏ –Ω–∞ SQLite –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞)
users = {}            # group_id -> {user_id: {...}}
waiting_proof = {}    # group_id -> {user_id: True/False}
pending_reports = {}  # group_id -> {report_id: {...}}
REPORT_ID = {}        # group_id -> int


GROUP_ID = -4828175895  # —Ç–≤–æ–π group id (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π)
TOKEN = os.getenv("BOT_TOKEN") or "–¢–í–û–ô_–¢–û–ö–ï–ù_–°–Æ–î–ê"

logging.basicConfig(level=logging.INFO)

app = Flask(__name__)
bot = Bot(token=TOKEN)
dispatcher = Dispatcher(bot, None, workers=0)
BOT_ID = None
pending_habit = {}  # user_id -> habit_text

def start(update, context):
    update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø Updu-–±–æ—Ç. –í–≤–µ–¥–∏ /habit <—Ç–µ–∫—Å—Ç –ø—Ä–∏–≤—ã—á–∫–∏>, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")

def habit(update, context):
    group_id = update.effective_chat.id
    user_id = update.message.from_user.id
    username = update.message.from_user.username
    habit_text = ' '.join(context.args)
    if not habit_text:
        update.message.reply_text("–ü—Ä–∏–º–µ—Ä: /habit —á–∏—Ç–∞—Ç—å 10 —Å—Ç—Ä–∞–Ω–∏—Ü")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    pending_habit[user_id] = (group_id, habit_text)

    kb = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –î–∞", callback_data="habit_confirm"),
            InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="habit_cancel")
        ]
    ])
    update.message.reply_text(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É –Ω–∞:\n*{habit_text}*?",
        reply_markup=kb,
        parse_mode="Markdown"
    )


def done(update, context):
    group_id = update.effective_chat.id
    user_id = update.message.from_user.id
    if group_id not in users or user_id not in users[group_id]:
        update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π –ø—Ä–∏–≤—ã—á–∫—É —á–µ—Ä–µ–∑ /habit ...")
        return
    if group_id not in waiting_proof:
        waiting_proof[group_id] = {}
    waiting_proof[group_id][user_id] = True
    update.message.reply_text("–ü—Ä–∏—à–ª–∏ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ: —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç!")


def receive_proof(update, context):
    if not update.message or not update.message.from_user:
        return
    group_id = update.effective_chat.id
    user_id = update.message.from_user.id

    if group_id not in waiting_proof or not waiting_proof[group_id].get(user_id):
        return
    if group_id not in users or user_id not in users[group_id]:
        return

    if group_id not in REPORT_ID:
        REPORT_ID[group_id] = 1
    report_id = REPORT_ID[group_id]
    REPORT_ID[group_id] += 1

    if group_id not in pending_reports:
        pending_reports[group_id] = {}

    username = users[group_id][user_id]['username']
    habit_text = users[group_id][user_id]['habit']

    proof = None
    if update.message.photo:
        proof = update.message.photo[-1].file_id
        media_type = 'photo'
    elif update.message.video:
        proof = update.message.video.file_id
        media_type = 'video'
    elif update.message.text:
        proof = update.message.text
        media_type = 'text'
    else:
        update.message.reply_text("–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç!")
        return

    waiting_proof[group_id][user_id] = False
    pending_reports[group_id][report_id] = {
        'user_id': user_id,
        'habit': habit_text,
        'username': username,
        'proof': proof,
        'media_type': media_type,
        'approvers': [],
        'deniers': []
    }

    proof_text = (
        f"@{username} –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ –≤—ã–ø–æ–ª–Ω–∏–ª –ø—Ä–∏–≤—ã—á–∫—É:\n*{habit_text}*\n\n–í–æ—Ç –µ–≥–æ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ:\n"
        f"\n‚úÖ 0 –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π"
    )
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å (0)", callback_data=f"approve_{report_id}")],
        [InlineKeyboardButton("‚ùå –û–ø—Ä–æ–≤–µ—Ä–≥–Ω—É—Ç—å (0)", callback_data=f"deny_{report_id}")]
    ])

    if media_type == 'photo':
        context.bot.send_photo(chat_id=group_id, photo=proof, caption=proof_text, reply_markup=kb, parse_mode='Markdown')
    elif media_type == 'video':
        context.bot.send_video(chat_id=group_id, video=proof, caption=proof_text, reply_markup=kb, parse_mode='Markdown')
    elif media_type == 'text':
        context.bot.send_message(chat_id=group_id, text=f"{proof_text}\n\n{proof}", reply_markup=kb, parse_mode='Markdown')

    update.message.reply_text("–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ!")

def button(update, context):
    query = update.callback_query
    user_id = query.from_user.id
    data = query.data

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–º–µ–Ω—ã –ø—Ä–∏–≤—ã—á–∫–∏ ---
    if data == "habit_confirm":
        if user_id in pending_habit:
            group_id, habit_text = pending_habit.pop(user_id)
            username = query.from_user.username
            if group_id not in users:
                users[group_id] = {}
            users[group_id][user_id] = {'habit': habit_text, 'streak': 0, 'username': username}
            query.edit_message_text(f"–ü—Ä–∏–≤—ã—á–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: *{habit_text}*", parse_mode="Markdown")
        else:
            query.answer("–ù–µ—Ç –ø—Ä–∏–≤—ã—á–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        return

    if data == "habit_cancel":
        if user_id in pending_habit:
            pending_habit.pop(user_id)
            query.edit_message_text("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        else:
            query.answer("–ù–µ—Ç –ø—Ä–∏–≤—ã—á–∫–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return

    # --- –î–ê–õ–¨–®–ï –æ–±—ã—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ ---
    group_id = query.message.chat.id

    # data –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∏–¥–∞ approve_123 –∏–ª–∏ deny_123
    if '_' not in data:
        query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–Ω–æ–ø–∫–∏.")
        return

    action, report_id = data.split('_')
    report_id = int(report_id)
    report = pending_reports.get(group_id, {}).get(report_id)
    if not report:
        query.answer("–≠—Ç–æ—Ç –æ—Ç—á—ë—Ç —É–∂–µ –∑–∞–∫—Ä—ã—Ç!")
        return
    if user_id == report['user_id'] or user_id == BOT_ID:
        query.answer("–¢—ã –Ω–µ –º–æ–∂–µ—à—å –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —Å–µ–±—è –∏–ª–∏ –∑–∞ –±–æ—Ç–∞!")
        return

    changed = False
    if action == 'approve':
        if user_id in report['approvers']:
            query.answer("–¢—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'")
            return
        report['approvers'].append(user_id)
        if user_id in report['deniers']:
            report['deniers'].remove(user_id)
        changed = True
        query.answer("–¢—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ")
    elif action == 'deny':
        if user_id in report['deniers']:
            query.answer("–¢—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª '–û–ø—Ä–æ–≤–µ—Ä–≥–Ω—É—Ç—å'")
            return
        report['deniers'].append(user_id)
        if user_id in report['approvers']:
            report['approvers'].remove(user_id)
        changed = True
        query.answer("–¢—ã –æ–ø—Ä–æ–≤–µ—Ä–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ")

    group_members = len(users.get(group_id, {}))
    if BOT_ID and BOT_ID in users.get(group_id, {}):
        group_members -= 1
    needed = group_members // 2 + 1 if group_members > 1 else 1

    approve_count = len(report['approvers'])
    deny_count = len(report['deniers'])

    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ({approve_count})", callback_data=f"approve_{report_id}")],
        [InlineKeyboardButton(f"‚ùå –û–ø—Ä–æ–≤–µ—Ä–≥–Ω—É—Ç—å ({deny_count})", callback_data=f"deny_{report_id}")]
    ])
    try:
        query.edit_message_reply_markup(reply_markup=kb)
    except Exception:
        pass

    if approve_count >= needed:
        users[group_id][report['user_id']]['streak'] += 1
        context.bot.send_message(
            chat_id=group_id,
            text=(f"‚úÖ @{report['username']}, —Ç–≤–æ—è –ø—Ä–∏–≤—ã—á–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n"
                  f"–°—Ç—Ä–∏–∫: {users[group_id][report['user_id']]['streak']} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥! üéâ")
        )
        pending_reports[group_id].pop(report_id)
    elif deny_count >= needed:
        users[group_id][report['user_id']]['streak'] = 0
        context.bot.send_message(
            chat_id=group_id,
            text=f"‚ùå @{report['username']}, –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ! –°—Ç—Ä–∏–∫ —Å–±—Ä–æ—à–µ–Ω."
        )
        pending_reports[group_id].pop(report_id)


def streak(update, context):
    group_id = update.effective_chat.id
    user_id = update.message.from_user.id
    streak = users.get(group_id, {}).get(user_id, {}).get('streak', 0)
    update.message.reply_text(f"–¢–≤–æ–π —Å—Ç—Ä–∏–∫: {streak} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥.")


# === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ ===
dispatcher.add_handler(CommandHandler("start", start))
dispatcher.add_handler(CommandHandler("habit", habit))
dispatcher.add_handler(CommandHandler("done", done))
dispatcher.add_handler(CommandHandler("streak", streak))
dispatcher.add_handler(CallbackQueryHandler(button))
dispatcher.add_handler(MessageHandler(Filters.photo | Filters.video | Filters.text, receive_proof))

@app.route(f'/{TOKEN}', methods=['POST'])
def webhook():
    update = Update.de_json(request.get_json(force=True), bot)
    dispatcher.process_update(update)
    return 'ok'

@app.route('/')
def index():
    
    return 'Updu –±–æ—Ç –Ω–∞ –≤–µ–±—Ö—É–∫–∞—Ö!'

def main():
    global BOT_ID
    BOT_ID = bot.get_me().id
    load_users()
    port = int(os.environ.get('PORT', 10000))
    app.run(host='0.0.0.0', port=port)

if __name__ == "__main__":
    main()


